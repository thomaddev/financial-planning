import { FilterOperation, FilterType } from '@/data'
import queryString from 'query-string'

/**
 * Converts the ag-Grid filter model to a query string.
 * This function constructs query parameters based on the filter model provided by ag-Grid.
 *
 * @param {FilterModel | null} filterModel - The filter model provided by ag-Grid.
 * @param {boolean} [isCustom=false] - Indicates whether custom filter types are used. Default is false.
 * @returns {string} A query string representing the filter parameters.
 */
export function convertFilterToQueryString(filterMode, isCustom) {
  const filterQueries = {}
  if (!filterMode) return ''
  for (const key in filterMode) {
    const filter = filterMode[key]
    const filterType = filter.filterType
    const operation = isCustom ? filter.type : FilterOperation[filter.type]
    const filterValue = filter.filter
    _generateQueryString(filterQueries, filterType, key, operation, filterValue)
  }

  return decodeURIComponent(queryString.stringify(filterQueries))
}

/**
 * Generates a filter query string based on the provided filter parameters.
 *
 * This function generates a filter query string based on the filter parameters such as
 * filter type, key, type, and filter value. It utilizes the `_generateQueryString` function
 * to construct the filter queries and then converts them into a query string using `queryString.stringify`.
 *
 * @param {string} filterType - The type of filter (text or number).
 * @param {string} key - The key to filter on.
 * @param {string} type - The type of filter operation (e.g., CONTAINS, EQUALS, etc.).
 * @param {(string | number)} filterValue - The value to filter against.
 * @returns {string} The filter query string.
 */
export function generateFilterQueryString(filterType, key, type, filterValue) {
  const filterQueries = {}
  _generateQueryString(filterQueries, filterType, key, type, filterValue)
  return queryString.stringify(filterQueries)
}

/**
 * Extracts the value of a specific key from the query string generated by ag-Grid filters,
 * regardless of the filter operation.
 *
 * @param {string} queryStringInput - The query string generated by `convertFilterToQueryString`.
 * @param {string} key - The key to extract the value for (e.g., 'record_name').
 * @returns {(string | null)} The value corresponding to the provided key, or null if not found.
 */
export function getDynamicQueryValue(queryStringInput, key) {
  // const parsedQuery = queryString.parse(queryStringInput, { arrayFormat: 'bracket' });
  const parsedQuery = queryString.parse(queryStringInput)

  // Find the key that starts with `filters[key][`
  const keyPattern = new RegExp(`^filters\\[${key}\\]\\[(.*?)\\]$`)
  for (const queryKey in parsedQuery) {
    if (keyPattern.test(queryKey)) {
      return parsedQuery[queryKey]
    }
  }
  return null
}

function _generateQueryString(filterQueries, filterType, key, operation, filterValue) {
  switch (filterType) {
    case FilterType.text:
      // if (operation === FilterOperation.contains) {
      filterQueries[`filters[${key}][${operation}]`] = filterValue
      // }
      break
    case FilterType.number:
      filterQueries[`filters[${key}][$${operation}]`] = filterValue
      break
    // Add cases for other filter types as needed
    default:
      break
  }
  return filterQueries
}
